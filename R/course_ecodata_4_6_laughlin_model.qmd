---
title: "Analysis of Ecological Data <br> Calculate communities based on traits"
author: "<b>Markus Bauer</b> <br>"
date: today
date-format: iso
format: html
toc: true
toc-depth: 3
toc-expand: 2
number-sections: true
dev: png
fig-width: 7
fig-height: 5
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE
  )
```

Technichal University of Munich, TUM School of Life Sciences, Chair of
Restoration Ecology, Emil-Ramann-Stra√üe 6, 85354 Freising, Germany

[markus1.bauer\@tum.de](mailto:markus1.bauer@tum.de)

<img src="https://info.orcid.org/wp-content/uploads/2019/11/orcid_16x16.png" alt="ORCID logo" width="20" height="20"/><https://orcid.org/0000-0001-5372-4174>

[![GoogleScholar](https://img.shields.io/badge/Google%20Scholar-4285F4?style=for-the-badge&logo=google-scholar&logoColor=white)](https://scholar.google.de/citations?user=oHhmOkkAAAAJ&hl=de&oi=ao)
[![GitHub](https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&logo=github&logoColor=white)](https://github.com/markus1bauer)

::: {.content-hidden when-format = "html"}

# Tasks

* Include family data in Ammer traits data
* Define species composition for Ammer data
* Select suitable values for SLA
* NMDS only possible with 9-15 communities
* Use package Landscape metrics with CORINE landcover

:::

[Original vignette](https://cran.r-project.org/web/packages/Select/vignettes/selectSpecies.html) (Laughlin et al. 2018)

# Preparation

The package `Select` determines species probabilities (i.e., relative abundances) that satisfy a given functional trait profile. Restoring resilient ecosystems requires a flexible framework for selecting assemblages that are based on the functional traits of species. However, current trait-based models have been limited to algorithms that can only select species by optimising specific trait values, and could not elegantly accommodate the common desire among restoration ecologists to produce functionally diverse assemblages. We have solved this problem by applying a non-linear optimisation algorithm that optimises Rao Q, a closed-form functional trait diversity index that incorporates species abundances, subject to other linear constraints. This framework generalises previous models that only optimised the entropy of the community, and can optimise both functional diversity and entropy simultaneously. This package can also be used to generate experimental assemblages to test the effects of community-level traits on community dynamics and ecosystem function.

## Load libraries and functions

The Select package is of Laughlin et al. ([2018](https://doi.org/10.1111/2041-210X.13023))

```{r}
library(here)
library(tidyverse)
library(Select)
rm(list = ls())
```

## Load data

```{r}
species_ammer <- read_csv(
  here("data", "processed", "data_processed_species.csv"),
  col_names = TRUE, col_types = cols(.default = "?")
  ) %>%
  column_to_rownames("accepted_name")

traits_ammer <- read_csv(
  here("data", "processed", "data_processed_traits_ammer.csv"),
  col_names = TRUE, col_types = cols(.default = "?")
  ) %>%
  column_to_rownames("accepted_name")
```

 <a href="#top">Back to top</a>

# Calculation of species compositions

## Using one trait

Create a simple trait dataset using a species pool of 5 species with trait values 1 through 5.

```{r}
traits_one <- tibble(.rows = 5) %>%
  mutate(
    traitX = 1:5, # Set trait values for each species from 1 to 5
    name = letters[row_number()] # Most datasets have species names as row names, so let's add arbitrary row names using letters
    ) %>%
  column_to_rownames("name") %>%
  as.matrix() # Note that we make this a matrix to pass it into the function
```

### Constrain to CWM = 3.5

Let us start with the most basic use of the function: to derive a species abundance distribution where we only want to constrain the abundances so that the community has a community-weighted mean (CWM) trait equal to 3.5.

We will define four arguments in the function for this example `t2c`: this is the matrix of species trait values that we want to constrain constraints: this is a vector of CWM trait values. In this case, we only have a one dimensional matrix of `t2c`, so this vector should contain only one element: 3.5 `t2d`: when you are not maximizing functional diversity, simply specify the same matrix here as you did for `t2c` obj: this is the objective function that is being maximized. In this example we are not maximizing functional diversity, so we use the entropy function (H)

```{r}
result1 <- Select::selectSpecies(
  t2c = traits_one,
  constraints = c(traitX = 3.5),
  t2d = traits_one,
  obj = "H"
  )

Select::plotProbs(result1, traits_one, xlab = "Species")
```

<a href="#top">Back to top</a>

### Constrain to CWM = 3.5 and maximize Rao Q

We will now see what happens when we maximize Rao Q (Q, quadratic entropy), an index of functional diversity, rather than maximizing entropy.

```{r results = FALSE, fig.show = 'hide'}
result2 <- Select::selectSpecies(
  t2c = traits_one,
  constraints = c(traitX = 3.5),
  t2d = traits_one,
  obj = "Q"
  )
# Note the only difference with result1 is a different objective function (Q).

Select::plotProbs(result2, traits_one, xlab = "Species")
```

Interestingly, the CWM trait value is the same for both `result1` and `result2`, but the species abundance distributions are radically different. When maximizing Rao Q, this makes the most functionally dissimilar species the most abundant, and all species in the middle of the trait distribution have vanishingly small abundances. This is not a desirable solution for ecological restoration. One way to fix this is to optimize both Rao Q and Entropy simultaneously.

 <a href="#top">Back to top</a>

### Constrain to CWM = 3.5 and maximize Rao Q and Entropy

We will now see what happens when we maximize a function that additively combines both Rao Q (Q, quadratic entropy) and entropy (H).

```{r results = FALSE, fig.show = 'hide'}
result3 <- Select::selectSpecies(
  t2c = traits_one,
  constraints = c(traitX = 3.5),
  t2d = traits_one,
  obj = "QH"
  )
### Note the only difference with result2 is a different objective function (QH)

Select::plotProbs(result3, traits_one, xlab = "Species")
```

Note that the abundance distribution still maximizes the most dissimilar species, but it evens out the abundances across all the species.

### Maximize Rao Q and Entropy, no CWM trait constraint

Suppose we do not want to constrain the abundances to satisfy a specific CWM trait value, and simply want to maximize functional diversity. If you do not want to constrain the results to satisfy a particular CWM trait value, then leave the `t2c` and constraints arguments blank.

```{r}
result4 <- Select::selectSpecies(
  t2d = traits_one,
  obj = "QH"
  )

Select::plotProbs(result4, traits_one, xlab = "Species")
```

<a href="#top">Back to top</a>

## Using two traits

In many cases, we will want to restore ecological communities with convergence toward one trait value, but we want to diversify a different trait. The following examples illustrate how to do so on a dataset with known structure to easily illustrate the results.

Create 2-dimensional trait matrix with 16 species

```{r}
traits_two <- tibble(.rows = 16) %>%
  mutate(
    traitX = c(rep(1, 4), rep(2, 4), rep(3, 4), rep(4, 4)),
    traitY = c(rep(c(1, 2, 3, 4), 4)),
    name = letters[row_number()]
  ) %>%
  column_to_rownames("name")
traits_x <- traits_two %>%
  select(traitX) %>%
  as.matrix()
traits_y <- traits_two %>%
  select(traitY) %>%
  as.matrix()
```

 <a href="#top">Back to top</a>

### Constrain trait X to a CWM = 3.5, maximize Rao Q of trait Y

```{r results = FALSE, fig.show = 'hide'}
result5 <- Select::selectSpecies(
  t2c = traits_x,
  constraints = c(traitX = 3.5),
  t2d = traits_y,
  obj = "Q",
  capd = FALSE
  )

Select::plotProbs(result5, traits_two, cex.lab = 0.7)
```

Note how this result is not desirable because it suppresses the abundances of species with intermediate trait Y values. This is because we only maximized Rao Q. Let us see how the results change when we maximize both Rao Q and entropy.

### Constrain trait X to a CWM = 3.5, maximize Rao Q + Entropy of trait Y

```{r results = FALSE, fig.show = 'hide'}
result6 <- Select::selectSpecies(
  t2c = traits_x,
  constraints = c(traitX = 3.5),
  t2d = traits_y,
  obj = "QH",
  capd = TRUE
  )

Select::plotProbs(result6, traits_two, cex.lab = 0.7)
```

 <a href="#top">Back to top</a>

## Use the Ammer data

### Define a seed mix

You have to select a species composition out of your species pool

```{r}
# family is missing in traits_ammer!!
# traits <- traits_ammer %>%
#   mutate(
#     functional_group = if_else(
#       !(family == "Poaceae" | family == "Fabaceae" | family == "Cyperaceae" | family == "Juncaceae"), "forb", if_else(
#         family == "Poaceae" | family == "Juncaceae" | family == "Cyperaceae", "graminoid", if_else(
#           family == "Fabaceae", "legume", "other"
#         )
#       )
#       )
#       )

#   comp <- c(sample(herbs$name, 12),
#             sample(grass$name, 5),
#             sample(legume$name, 3)
#             )
```

### Calculate species composition

You can calculate with the Ammer data three different species
compositions.

First, calculate a species composition with a low CWM of SLA.

```{r}
rm(list = setdiff(ls(), c("species_ammer", "species_spain", "traits_ammer", "traits_spain", "sites_spain", "sites_ammer")))

traits <- traits_ammer %>%
  filter(!is.na(sla_mean) & !is.na(seed_mass_mean) & seed_mass_mean < 1) %>%
  select(sla_mean, seed_mass_mean)

traits_x <- traits %>%
  select(sla_mean) %>%
  as.matrix()

traits_y <-  traits %>%
  select(seed_mass_mean) %>%
  as.matrix()

mix_low <- Select::selectSpecies(
  t2c = traits_x,
  constraints = c(sla_mean = 290),
  t2d = traits_y,
  obj = "QH",
  capd = TRUE
  )

Select::plotProbs(mix_low, traits)
```

Second, calculate a species composition with a high CWM of SLA.

```{r}
mix_high <- Select::selectSpecies(
  t2c = traits_x,
  constraints = c(sla_mean = 350),
  t2d = traits_y,
  obj = "QH",
  capd = TRUE
  )

Select::plotProbs(mix_high, traits)
```

Third, calculate a species composition with an intermediate CWM of SLA.

```{r}
mix_intermediate <- Select::selectSpecies(
  t2c = traits_x,
  constraints = c(sla_mean = 320),
  t2d = traits_y,
  obj = "QH",
  capd = TRUE
  )

Select::plotProbs(mix_intermediate, traits)
```

 <a href="#top">Back to top</a>

### Control species composition

```{r results = FALSE}
mix_low$prob %>%
  as.data.frame() %>%
  rownames_to_column("name") %>%
  as_tibble() %>%
  mutate(across(where(is.numeric), ~ round(.x, digits = 3))) %>%
  arrange(V1) %>%
  head(n = 10)

mix_high$prob %>%
  as.data.frame() %>%
  rownames_to_column("name") %>%
  as_tibble() %>%
  mutate(across(where(is.numeric), ~ round(.x, digits = 3))) %>%
  arrange(V1) %>%
  head(n = 10)

mix_intermediate$prob %>%
  as.data.frame() %>%
  rownames_to_column("name") %>%
  as_tibble() %>%
  mutate(across(where(is.numeric), ~ round(.x, digits = 3))) %>%
  arrange(V1) %>%
  head(n = 10)
```

<a href="#top">Back to top</a>

### Create a NMDS

```{r}
# data1 <- mix_low$prob %>%
#   as.data.frame() %>%
#   rownames_to_column(var = "name")
# data2 <- mix_high$prob %>%
#   as.data.frame() %>%
#   rename(V2 = V1) %>%
#   rownames_to_column(var = "name")
# data3 <- mix_intermediate$prob %>%
#   as.data.frame() %>%
#   rename(V3 = V1) %>%
#   rownames_to_column(var = "name")
# data <- data1 %>%
#   left_join(data2, by = "name") %>%
#   left_join(data3, by = "name") %>%
#   column_to_rownames(var = "name")
# 
# m1 <- vegan::metaMDS(
#   data, distance = "bray", k = 2, trymax = 20, autotransform = TRUE
#   )
```

Create own species compositions from your data

<a href="#top">Back to top</a>

```{r}
sessionInfo()
```
