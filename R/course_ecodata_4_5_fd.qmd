---
title: "Analysis of Ecological Data <br> Functional Diversity (FD) within communities"
author: "<b>Markus Bauer</b> <br>"
date: today
date-format: iso
format: html
toc: true
toc-depth: 3
toc-expand: 2
number-sections: true
dev: png
fig-width: 7
fig-height: 5
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE
  )
```

Technichal University of Munich, TUM School of Life Sciences, Chair of Restoration Ecology, Emil-Ramann-Straße 6, 85354 Freising, Germany

[markus1.bauer\@tum.de](mailto:markus1.bauer@tum.de)

<img src="https://info.orcid.org/wp-content/uploads/2019/11/orcid_16x16.png" alt="ORCID logo" width="20" height="20"/><https://orcid.org/0000-0001-5372-4174>

[![Google Scholar](https://img.shields.io/badge/Google%20Scholar-4285F4?style=for-the-badge&logo=google-scholar&logoColor=white)](https://scholar.google.de/citations?user=oHhmOkkAAAAJ&hl=de&oi=ao)
[![GitHub](https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&logo=github&logoColor=white)](https://github.com/markus1bauer)

::: {.content-hidden when-format="html"}

# Tasks

* Plot and save sites spain
* Make alpha, beta and gamma FD available
* Quellen verlinken bei partitioning verlinken
* Write learning objectives

:::

This tutorial uses Bello et al. ([2021](https://doi.org/10.1017/9781108628426))

# Preparation

In this exercise we will learn how to compute different indices of Functional diversity (FD). This exercise follows the second part of Chapter 5 of the reference textbook, so all theoretical and mathematical issues beyond the indices described in this exercise can be found there. We will work with invented data and also field data from an climatic gradient in NE Spain. In Chapter 3, and the relative exercise, we already explained how to compute trait dissimilarity between species pairs, and thus in this exercise we assume that users have already an idea how to compute and interpret such trait dissimilarity. This file will first cover the use of the `dbFD` function, with invented data and then with the NE Spain data. Finally, we will learn how to compute alpha, beta and gamma functional diversity with the Rao index.

## Load libraries and functions

The FD package is of Laliberté & Legendre ([2010](https://doi.org/10.1890/08-2244.1))

```{r libraries, message = FALSE}
library(here)
library(tidyverse)
library(FD)
library(funspace)
rm(list = ls())
```

We will also need one ad-hoc function ‘Rao’

```{r}
source(here::here("data", "raw", "bello_etal-2021",  "chapter5", "Rao.r"))
```

## Load data

```{r load-data}
species_spain <- read_delim(
  here::here(
    "data", "raw", "bello_etal-2021", "chapter5", "speciesXplotsNE.txt"
    ),
  col_names = TRUE, delim = "\t", col_types = cols(.default = "?")
  ) %>%
  column_to_rownames("species")

traits_spain <- read_delim(
  here::here(
    "data", "raw", "bello_etal-2021", "chapter5", "speciesXtraitsNE.txt"
    ),
  col_names = TRUE, delim = "\t", col_types = cols(.default = "?")
  ) %>%
  column_to_rownames("species")

sites_spain <- read_csv(
  here::here("data", "processed", "data_processed_sites_spain_4.4.csv"),
  col_names = TRUE, col_types = cols(.default = "?")
  )

species_ammer <- read_csv(
  here::here("data", "processed", "data_processed_species_ammer_4.1.csv"),
  col_names = TRUE, col_types = cols(.default = "?")
  )

traits_ammer <- read_csv(
  here::here("data", "processed", "data_processed_traits_ammer_4.1.csv"),
  col_names = TRUE, col_types = cols(.default = "?")
  )

sites_ammer <- read_csv(
  here::here("data", "processed", "data_processed_sites_ammer_4.4.csv"),
  col_names = TRUE, col_types = cols(.default = "?")
  )
```

<a href="#top">Back to top</a>

# Calculation of FD

## Calculation with the dbFD function

### Introduction

As well summarized in the help function of `?dbFD`, dbFD implements a flexible distance-based framework to compute multidimensional functional diversity (FD) indices. dbFD returns the three FD indices of Villéger et al. ([2008](https://doi.org/10.1890/07-1206.1)): functional richness (FRic), functional evenness (FEve), and functional divergence (FDiv), as well as functional dispersion (FDis; Laliberté and Legendre [2010](https://doi.org/10.1890/08-2244.1)), Rao’s quadratic entropy (Q) (Botta-Dukát [2005](https://doi.org/10.1111/j.1654-1103.2005.tb02393.x)), a functional group richness (FGR) (number of functional groups, see Chapter 3 and Reference material Ch3 and Petchey and Gaston, [2006](https://doi.org/10.1111/j.1461-0248.2006.00924.x)), and the community-level weighted means of trait values (CWM; e.g. Lavorel et al. [2008](https://doi.org/10.1111/j.1365-2435.2007.01339.x)). Some of these FD indices consider species abundances (see Fig. 5.4 in the reference book).

As we just saw, the function `dbFD` is very practical because it computes a lot of indices of FD at once. Most of these indices are introduced and discussed in the reference textbook, in Chapter 5. We will thus learn how to apply the function `dbFD`, using first some of the examples available in the help of the function, i.e. from `?dbFD`. As in the exercises with CWM, the examples for the function consider invented data, the ‘dummy’ data, containing both a ‘species x community’ matrix and a ‘species x trait’ matrix.

```{r}
dummy <- dummy
dummy$abun # Species x community matrix
```

```{r}
dummy$trait # Species x trait matrix
```

*Notice* that the function `dbFD`, while extremely useful, has also many strict requirements. The species x community matrix should be a data frame and the order and name of species should be *exactly* the same in the ‘species x community matrix’ and in the Species x trait matrix.

It is very important to check that the species that you have in these ‘species x community’ matrix and ‘species x trait’ matrices should be the same. In this case we know that they are the same, so we can already run the code:

```{r}
ex1 <- dbFD(
  dummy$trait, dummy$abun,
  w.abun = TRUE,
  calc.CWM = FALSE, calc.FDiv = FALSE
  )
```

First we see that the function is very “talkative”, i.e. it explains a lot of things while running. We can eventually switch-off the messages by using `messages = F`, as we will do in the next examples. In the meantime we can see that FEve (functional evenness) cannot be computed in communities with less than 3 species. Similarly as FRic (functional richness) and FDiv (functional divergence) cannot be computed if there is less that 3 unique species, meaning that they should at least have one different trait value. Other important messages include the number of PCoA axes considered. Out of the 7 considered (i.e. with 8 species, the number of PCoA is 7) a total of 2 axes are retained to reflect trait differences between species (see Chapter 3 in the reference book and R material Ch 3. In other words the PCoA has synthesized all traits into two multivariate axes.

Let’s now see the results. The results are stored in the object ex1, which is a ‘list’. As such if you need a particular object you can extract it, for example as `ex1$FRic`:

```{r}
class(ex1)
```

```{r}
ex1
```

```{r}
ex1$FRic
```

For categorical and binary traits you might want to include the argument `CWM.type = "all"` when running it.

```{r}
ex1 <- dbFD(
  dummy$trait, dummy$abun, CWM.type = "all", message = FALSE
  )
# notice we add `message = F` to avoid too many annoying messages from the function :)
ex1$CWM
```

### w argument

In the second example of the help page for `dbFD`, it is possible to see a the argument `w`, which was discussed for the `gowdis` in the R material Ch3 and in Chapter 3 of the reference textbook. As a matter of fact the function gowdis is also included in the `dbFD` function and, although you do not see it, it is applied exactly as already introduced in the R material 3. This is the first step for the calculation of functional diversity.

The argument `w` allows us to give different weights to the traits, for example when you want some traits to be more important in the calculation of the dissimilarity between species and thus functional diversity (we discuss the importance of this weight in the exercises related to Chapter 3). The example 2 in the help function looks like this:

```{r}
# add variable weights
w <- c(1, 5, 3, 2, 5, 2, 6, 1)
ex2 <- dbFD(
  dummy$trait, dummy$abun, w, corr = "cailliez", message = FALSE
  )
# `cailliez` correction is used because `sqrt` does not work
```

In practice the second trait got 5 times more weight than the first one (the vector w, includes one value for each trait, reflecting the intended weight in the calculation; again see R material Ch 2.

It might happen that when running the dbFD function you get some sort of errors. For example if you run a line such as `ex2 <- dbFD(dummy$trait, dummy$abun, w, message = F)`, you will get one saying that the distance between species did not have Euclidean properties after the square root correction, which is automatically applied in the function. The PCoA analyses work better when the dissimilarity matrix (differences between species in terms of traits; R material Ch 2) has Euclidean properties and the dbFD function will not work unless this condition is met. In the case that the function does not work directly with your data, you can try other corrections with the argument corr. The help function provides enough information on this issue. In practice the effect of such correction is not very strong, at least in our experience, especially when there are enough species.

It is very important to notice that the function `dbFD` works not only by providing a ‘species x trait’ matrix like the `dummy$trait` in the example above. You can also provide directly a distance matrix calculated before hand, for example using the Gower distance (see Chapter 3; R material Ch 3). If you run the following example (ex3) you will thus get the same results as in the object ex1.

```{r}
trait.d <- gowdis(dummy$trait) # Gower distance
ex3 <- dbFD(trait.d, dummy$abun, message = FALSE)
ex1$FRic == ex3$FRic
```

Similarly if you apply `w` in the calculation of the Gower distance:

```{r}
trait.dw <- gowdis(dummy$trait, w) # Gower distance with a different weight for the traits
ex3w <- dbFD(
  trait.dw, dummy$abun, corr = "cailliez", message = FALSE
  )
ex2$FRic == ex3w$FRic
```

Although we already discussed what is a dissimilarity matrix in Chapter 3, and its corresponding R material Ch 3, in the next lines, we show once again how it does look:

```{r}
trait.d # Gower distance
```

In practice, this object shows the functional distance, i.e. dissimilarity between each pair of species, in this case expressed as an average dissimilarity over all (standardized) traits.

The function `dbFD` applies the Gower distance automatically if you use a species x trait matrix (such as ‘spxt’). It will also work when proving a dissimilarity matrix, unless such dissimilarity does not contain any NAs (NAs in the dissimilarity matrix are not accepted!). This means that you can either provide a specific dissimilarity matrix after checking that there are no NAs or you can make sure that, in the ‘species x trait’ matrix, you have ‘enough’ trait values. In other words, this means that species pairs should have, at least, information for one common trait.

 <a href="#top">Back to top</a>

## Spain data

### Numeric traits

Let’s now apply the `dbFD` function to the NE Spain data already described in section 5.1 above. The data was already loaded already above. As in the exercise on CWM, we need to improve the normality of the trait SLA in the matrix.

```{r}
rm(list = setdiff(ls(), c("species_ammer", "species_spain", "traits_ammer", "traits_spain", "sites_spain", "sites_ammer")))
traits_spain <- traits_spain %>%
  mutate(SLA = log(SLA)) #improve the normality of the trait values
head(traits_spain)
```

Let’s directly use the `dbFD` function. We need first to recall that we have a fuzzy coding data in the trait matrix (`spxt$LF_xx`) and for now, for simplicity, let’s forget about this type of trait data. We can use thus only the first 3 columns of the trait matrix for the time being (but see below for using all traits). Now that we know how the `dbFD` function works, i.e. it is used very similarly to the function `functcomp`, it is easy to have a lot of indices of FD computed in only one line! But for the time being we avoid computing again the CWM values, with the argument `calc.CWM = FALSE` and we also ask that the FRic will be standardized between 0 and 1, i.e. `stand.FRic = TRUE`.

```{r}
resFD <- dbFD(
  traits_spain[, 1:3], log(t(species_spain) + 1), w.abun = TRUE,
  message = FALSE, calc.CWM = FALSE, stand.FRic = TRUE
  ) 
```

We can now explore a bit the results. First let’s see how much the different FD indices are correlated between them:

```{r}
important.indices <- data.frame(
  resFD$nbsp, resFD$FRic, resFD$FEve, resFD$FDiv, resFD$FDis, resFD$RaoQ
  ) %>%
  rename(
    species_richness = resFD.nbsp,
    fric = resFD.FRic,
    feve.abu = resFD.FEve,
    fdiv.abu = resFD.FDiv,
    fdis.abu = resFD.FDis,
    rao.abu = resFD.RaoQ
  )

library(GGally)
GGally::ggpairs(important.indices)
```

We generally see that FRic is positively correlated to the number of species, as expected. Of course FDis and Rao give very similar results (they are actually the same index, with only a squaring difference, see Pavoine & Bonsall ([2011](https://doi.org/https://doi.org/10.1111/j.1469-185X.2010.00171.x))). Slight deviations from the perfect linear relationship depends ONLY on the fact that Rao is computed directly from a Gower trait distance, while in FDis the Gower trait distance is first transformed into a PCoA and then the PCoA axes are used to compute the dissimilarities in the multivariate space. In some cases FEve is correlated negatively to FRic, as we discussed in Chapter 5 of the reference text book (see below for more details). We also see that Rao and FDis are increasing when the ‘range’ of traits, i.e. FRic (which is, as we discuss in Chapter 5 of the reference text book, is the size of the Convex Hull when multiple traits are considered, and the range, when only one trait is considered). We also see that both FDis and Rao are not correlated to the number of species. Finally, we also see that FDiv is quite correlated with FDis and Rao.

### FD with fuzzy coding

We remind users (see Chapter 3 of the reference textbook, and R material Ch 3) that for computing FD with all traits considered in the ‘spxt’ matrix, which include fuzzy coding (‘LF_xx’ labeled column), we need to complicate a bit more the script. Otherwise the Gower distance used in the dbFD function will ‘understand’ that each of the LF_xx column in the matrix is a different trait. We certainly do not want that, even if it would provide nicer results, as we now want the 4 traits to have the same weight and scale! We can use the approach already introduced for the R material Ch 3, i.e. compute the dissimilarity for each trait separately and then average the dissimilarity across traits:

```{r}
head(traits_spain)
```

```{r}
all.dist <- (gowdis(traits_spain["GrowhtForm"]) + gowdis(traits_spain["SLA"]) + gowdis(traits_spain["LEG"]) +
     gowdis(traits_spain[, 4:10]) / max(gowdis(traits_spain[, 4:10]))) / 4
resFD.alltraits <- dbFD(
  all.dist, log(t(species_spain) + 1), message = FALSE, calc.CWM = FALSE, stand.FRic = TRUE
  )
```

### Saving

Merge the FD indices in the sites data

```{r}
data <- important.indices %>%
  rownames_to_column("id.plot") %>%
  select(id.plot, species_richness, fric, fdis.abu, feve.abu)

sites_spain <- sites_spain %>%
  left_join(data, by = "id.plot")
```

Save the new sites data

```{r}
write_csv(
  sites_spain, here::here("data", "processed", "data_processed_sites_spain_4.5.csv")
  )
```

### Plotting

```{r}
sites_spain %>%
  pivot_longer(c(fric, fdis.abu, feve.abu), names_to = "fd", values_to = "value") %>%
  mutate(
    fd = if_else(
      fd == "fric", "FRic",if_else(
        fd == "fdis.abu", "FDis", if_else(
          fd == "feve.abu", "FEve", "Other"
          )
        )
      )
    ) %>%
  ggplot(aes(x = value)) +
  geom_density(color = "black", fill = "black", alpha = .1) +
  facet_grid(~ fd) +
  labs(x = expression(FD)) +
  theme(
    axis.line = element_line(color = "black"),
    panel.background = element_rect(fill = "transparent")
  )
```

<a href="#top">Back to top</a>

## Ammer data

Now, we calculate functional diversity only for a single trait.

### Preparation

```{r}
rm(list = setdiff(ls(), c("species_ammer", "species_spain", "traits_ammer", "traits_spain", "sites_spain", "sites_ammer")))
data_traits <- traits_ammer %>%
  select(accepted_name, sla_mean, growth_form_2) %>%
  filter(!is.na(sla_mean) & !(growth_form_2 %in% c("shrub", "tree"))) %>% # remove NAs of SLA and shrubs and trees
  mutate(sla_log = log(sla_mean)) %>%
  arrange(accepted_name) %>%
  select(accepted_name, sla_log)

data_species <- species_ammer %>%
  semi_join(data_traits, by = "accepted_name") %>%
  arrange(accepted_name) %>%
  pivot_longer(-accepted_name, names_to = "plot_id", values_to = "value") %>%
  pivot_wider(names_from = "accepted_name", values_from = "value") %>%
  column_to_rownames(var = "plot_id")

data_traits <- data_traits %>%
  column_to_rownames("accepted_name")
```

### Calculation

```{r message = FALSE}
data_abundance <- FD::dbFD(
  data_traits, data_species,
  calc.CWM = FALSE, w.abun = TRUE, # abundance data
  calc.FRic = TRUE, stand.FRic = TRUE, calc.FDiv = FALSE, corr = "none"
)
data_presence <- FD::dbFD(
  data_traits, data_species,
  calc.CWM = FALSE, w.abun = FALSE, # presence-absence data
  calc.FRic = TRUE, stand.FRic = TRUE, calc.FDiv = FALSE, corr = "none"
)
```

### Saving

Merge the FD indices in the sites data

```{r}
data <- data.frame(data_abundance$FDis, data_abundance$FRic, data_abundance$FEve) %>%
  rownames_to_column("id.plot") %>%
  rename(
    "fdis.abu.sla" = "data_abundance.FDis",
    "fric.abu.sla" = "data_abundance.FRic",
    "feve.abu.sla" = "data_abundance.FEve"
  ) %>%
  mutate(
    across(where(is.numeric), ~ round(.x, digits = 2))
    ) %>%
  select(id.plot, fdis.abu.sla, fric.abu.sla, feve.abu.sla)
sla <- data

sites_ammer <- sites_ammer %>%
  left_join(sla, by = "id.plot")
```


Save the new sites data

```{r}
write_csv(
  sites_ammer, here::here("data", "processed", "data_processed_sites_ammer_4.5.csv")
  )
```

### Plotting

Plot the CWMs of SLA

```{r}
sites_ammer %>%
  ggplot(aes(x = fdis.abu.sla)) +
  geom_density(color = "black", fill = "black", alpha = .1) +
  labs(x = expression(FDis~SLA)) +
  theme(
    axis.line = element_line(color = "black"),
    panel.background = element_rect(fill = "transparent")
  )
```

 <a href="#top">Back to top</a>

::: {.content-hidden when-format="html"}

# Calculation of Alpha, beta and gamma FD

In Chapter 5 we also discuss options to partition functional diversity, in a way similar to species diversity, i.e. in alpha and beta diversity. The literature about biodiversity partitioning is generally very complex, often with polarized views (e.g., Jost 2007). The partitioning of functional diversity has not been solved for many indices. The most reliable one seems Rao, following the work by de Bello et al. (2010) and Botta-Dukát (2018). Other options involve computing convex hull, similar to the FRic index, and look at intersections of the convex hull between communities. This is done in the package betapart (https://cran.r-project.org/web/packages/betapart/betapart.pdf) and using the functions functional.beta.multi and functional.beta.pair. We will introduce similar indice in the R material Ch 6. Here we focus instead mainly on Rao, following the reference textbook Chapter 5 and based on the fact that this approach can also consider species abundances.

There has been a debate, in Journal of Ecology, between Villeger & Mouillot (Villéger and Mouillot 2008) and Hardy and Jost (2008), on how Rao should be expressed, which is summarized for non mathematicians in the work by de Bello et al. (2010) . This work proposes solutions that solves the debate mentioned above and applies the corrections proposed by Jost for species diversity indices such as Simpson. All these concepts are resolved in the R function Rao (F. de Bello, Lavergne, et al. 2010), which is at the moment the only available function solving these issues. We can open the function (which actually can also account for phylogentic distance between species) and run it with few examples. Notice that in this case the ‘species x communities’ matrix has species as rows.

## The dataset

We can first play with the simple example provided in Chapter 5 of the reference textbook, which we recreate below:

```{r}
source(here::here("data", "raw", "bello_etal-2021",  "chapter5", "Rao.r"))
comm.1 <- c(1, 1, 0, 0, 0)
comm.2 <- c(0, 0, 1, 1, 0)
comm.3 <- c(0, 0, 1, 1, 1)
coms <- cbind(comm.1, comm.2, comm.3)
rownames(coms) <- paste("sp", 1:5, sep = ".")
coms
```

```{r}
# trait.reg1 <- c("grass", "grass", "forb", "forb", "grass")
# trait.reg2 <- c("grass", "grass", "legume", "forb", "grass")
# partRao.Reg1 <- Rao(
#   coms, dfunc = gowdis(as.data.frame(trait.reg1)),
#   dphyl = NULL, weight = FALSE, Jost = TRUE, structure = NULL
#   )
# partRao.Reg2 <- Rao(
#   coms, dfunc = gowdis(as.data.frame(trait.reg2)),
#   dphyl = NULL, weight = FALSE, Jost = TRUE, structure = NULL
#   )
```

## Partition functional diversity

The `Rao` function needs a species x communities matrix with species as rows and does not need that the dissimilarity matrix will include species names (it assumes, maybe wrongly, users are careful enough to have species in the same order in the trait matrix and in the species composition matrix). We just run the calculations, using the Jost correction (`Jost = TRUE`) to avoid having an underestimation of beta diversity (see Chapter 5 in the reference textbook for more details). We can now find the results used which we need to build a figure similar to Fig.5.6 in the reference textbook. The alpha taxonomic diversity (which is the mean Simpson per plot), the beta and gamma, can be obtained as:

```{r}
# partRao.Reg1$TD$Mean_Alpha #alpha
```

```{r}
# partRao.Reg1$TD$Beta_add #beta
```

```{r}
# partRao.Reg1$TD$Mean_Alpha + partRao.Reg1$TD$Beta_add == partRao.Reg1$TD$Gamma #alpha+beta=gamma
```

Indeed alpha + beta = gamma. We are aware some authors do not like to express beta diversity in additivity terms, so it has to be expressed in proportional terms, for example.

```{r}
# partRao.Reg1$TD$Beta_add * 100 / partRao.Reg1$TD$Gamma #beta / gamma
```

```{r}
# partRao.Reg1$TD$Beta_prop #which is the same as above
```

You can apply the same procedure between each pair of plot. The taxonomical beta diversity between each pair of plots is shown in the following object. Notice that between a pair of plots the value 50% implies a complete functional replacement/turnover (see textbook for more details). In fact, the value obtained, i.e. ‘Beta_prop’, depend on the number of plots considered (the maximum turnover is 50% for two plots and increases with increased number of plots). As such ‘Beta_prop’ can be standardized, to be independent on the number of plots, with the formula 14 in de Bello et al. (2010).

```{r}
# round(partRao.Reg1$TD$Pairwise_samples$Beta_prop) #value obtained without standardization
```

```{r}
# round(partRao.Reg1$TD$Pairwise_samples$Beta_prop / (1 - 1 / 2)) #standardized value, where 2 is the number of plos considered in the test, i.e. `turnover` between plots. 
```

## Plot

We can now try to make a figure similar to Fig.5.6.

```{r}
# TD <- c(partRao.Reg1$TD$Mean_Alpha, partRao.Reg1$TD$Beta_add)
# FD.reg1 <- c(partRao.Reg1$FD$Mean_Alpha, partRao.Reg1$FD$Beta_add)
# FD.reg2 <- c(partRao.Reg2$FD$Mean_Alpha, partRao.Reg2$FD$Beta_add)
# barplot(cbind(TD, FD.reg1, FD.reg2), beside = F, col = c(8, 0),
#         ylim = c(0, 5), ylab = c("Rao Equivalent Numbers"))
# points(2, 4, pch = 22, bg = "grey")
# points(2, 3.5, pch = 22, bg = "white")
# text(2, 4, "alpha", pos = 4)
# text(2, 3.5, "beta", pos = 4)
```

In practice we can see that in the second region (or in general when considering the trait ‘trait.reg2’) we have higher alpha but also higher beta diversity (i.e. functional replacement). As a proportion, however, the functional replacement is the same in both regions (i.e., ~42% of the trait diversity is between plots, as compared to within plots):

```{r}
# partRao.Reg1$FD$Beta_prop
```

```{r}
# partRao.Reg2$FD$Beta_prop
```

Let’s now work with the NE Spain data:

```{r}
# partRao.NESpain <- Rao(
# log(species_spain + 1), all.dist, dphyl = NULL, weight = FALSE, Jost = TRUE, structure = NULL
#  )
# partRao.NESpain$TD$Beta_prop
```

```{r}
# partRao.NESpain$FD$Beta_prop
```

```{r}
# TD.NEspain.prop <- c(100 * partRao.NESpain$TD$Mean_Alpha / partRao.NESpain$TD$Gamma,
                     # partRao.NESpain$TD$Beta_prop)
# FD.NEspain.prop <- c(100*partRao.NESpain$FD$Mean_Alpha/partRao.NESpain$FD$Gamma,
#                      partRao.NESpain$FD$Beta_prop)
# barplot(cbind(TD.NEspain.prop, FD.NEspain.prop), beside = F, col = c(8, 0),
#         ylim = c(0, 100), ylab = c("Proportion of Alpha and Beta in Equivalent numbers"))
# text(0.7, 60, "beta")
# text(0.7, 15, "alpha")
```

We can see in this figure that, despite the great turnover in species composition (beta TD, grey colour, left stack) we have a real low functional turnover. In other words **most of the trait dissimilarity between species is found within a plot and not across plots**, even if there are such a marked environmental changes and even if species composition changes are very strong (high beta TD).

:::

```{r}
sessionInfo()
```
